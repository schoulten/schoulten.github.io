{
  "hash": "65b9ca1d28af8b6778a359a6677db6c2",
  "result": {
    "markdown": "---\ntitle: \"meedr: MacroEconomic Expectations Data in R\"\ndate: \"2021-03-13\"\ndate-modified: \"2023-03-10\"\nauthor: \"Fernando da Silva\"\ndescription: \"Quick and easy access to market expectations data of the Focus report from Central Bank of Brazil\"\ncategories: [R, Macroeconomics, Data, API, English]\nimage: \"imgs/logo.png\"\naliases: \n  - /posts/r/meedr/index.html\n---\n\n\nVery happy to announce that `{meedr}`, my first package on R, is on its way to CRAN!\n\n**Note**: This package was definitively archived by CRAN on July 22, 2021 and is only available on GitHub. Despite this, maintenance and bug fixes will continue to be done.\n\n::: {.grid}\n\n::: {.g-col-10}\nThe goal of `{meedr}` is to provide quick and easy access to market expectations data for the main macroeconomic indicators in the Focus report, made available by the **Central Bank of Brazil** through the [Expectations System data API](https://olinda.bcb.gov.br/olinda/servico/Expectativas/versao/v1/aplicacao#!/recursos). This data comes from several financial institutions such as banks, brokers, funds, consultancies, etc.\n:::\n\n::: {.g-col-2}\n<img src=\"imgs/logo.png\" align=\"right\" height=\"139\" />\n:::\n\n:::\n\nThe `{meedr}` package offers an R interface to the API and other advantages:\n\n- Use of a caching system with package `{memoise}` to speed up repeated requests for data;\n- Users can utilize all cores of the machine (parallel computing) when fetching a large batch of time series.\n\n## Installation\n\nYou can install the development version from GitHub with:\n\n```r\n# install.packages(\"devtools\")\ndevtools::install_github(\"schoulten/meedr\")\n```\n\n## Features\n\n- To retrieve data from the API, there are several useful functions that connect to the endpoints:\n  - Monthly market expectations with [get_monthly()](#get_monthly)\n  - Quarterly market expectations with [get_quarterly()](#get_quarterly)\n  - Annual market expectations with [get_annual()](#get_annual)\n  - Market expectations for inflation over the next 12 months with [get_inflation_12m()](#get_inflation_12m)\n  - Monthly market expectations for the Top 5 indicators with [get_monthly_top5()](#get_monthly_top5)\n  - Annual market expectations for the Top 5 indicators with [get_annual_top5()](#get_annual_top5)\n\n## Example\n\nThese are some basic examples of using the package:\n\n### get_monthly()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(meedr)\n\n# Monthly market expectations for IPCA indicator\nmeedr::get_monthly(\n  indicator      = \"IPCA\",\n  first_date     = Sys.Date() - 30,\n  reference_date = format(Sys.Date(), \"%m/%Y\"),\n  be_quiet       = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32 × 10\n   indicator date       reference…¹  mean median    sd   min   max n_res…² basis\n   <chr>     <date>     <chr>       <dbl>  <dbl> <dbl> <dbl> <dbl>   <int> <int>\n 1 IPCA      2023-03-03 03/2023     0.719  0.72  0.135  0.4   1.01      57     1\n 2 IPCA      2023-03-03 03/2023     0.715  0.7   0.197  0.2   1.41     146     0\n 3 IPCA      2023-03-02 03/2023     0.692  0.69  0.158  0.38  1.02      53     1\n 4 IPCA      2023-03-02 03/2023     0.710  0.665 0.209  0.2   1.41     146     0\n 5 IPCA      2023-03-01 03/2023     0.686  0.66  0.167  0.38  1.02      51     1\n 6 IPCA      2023-03-01 03/2023     0.707  0.657 0.213  0.2   1.41     144     0\n 7 IPCA      2023-02-28 03/2023     0.709  0.65  0.213  0.38  1.41      56     1\n 8 IPCA      2023-02-28 03/2023     0.704  0.65  0.220  0.2   1.41     142     0\n 9 IPCA      2023-02-27 03/2023     0.725  0.69  0.217  0.2   1.41     107     1\n10 IPCA      2023-02-27 03/2023     0.703  0.65  0.219  0.2   1.41     142     0\n# … with 22 more rows, and abbreviated variable names ¹​reference_date,\n#   ²​n_respondents\n```\n:::\n:::\n\n\n### get_quarterly()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Quarterly market expectations for GDP indicator\nmeedr::get_quarterly(\n  indicator      = \"PIB Total\",\n  first_date     = \"2021-01-01\",\n  reference_date = paste0(\n    lubridate::quarter(Sys.Date()), \"/\", \n    lubridate::year(Sys.Date())\n    ),\n  be_quiet       = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 884 × 10\n   indicator date       reference…¹  mean median    sd   min   max n_res…² basis\n   <chr>     <date>     <chr>       <dbl>  <dbl> <dbl> <dbl> <dbl>   <int> <int>\n 1 PIB Total 2023-03-03 1/2023       1.72   1.64 1.03   -0.4  4.69      30     1\n 2 PIB Total 2023-03-03 1/2023       1.76   1.69 0.785  -0.4  4.69      84     0\n 3 PIB Total 2023-03-02 1/2023       1.82   1.86 1.11   -0.4  4.69      27     1\n 4 PIB Total 2023-03-02 1/2023       1.73   1.64 0.800  -0.4  4.69      84     0\n 5 PIB Total 2023-03-01 1/2023       1.76   1.86 0.994  -0.4  3.8       25     1\n 6 PIB Total 2023-03-01 1/2023       1.71   1.6  0.769  -0.4  3.8       85     0\n 7 PIB Total 2023-02-28 1/2023       1.67   1.7  0.911  -0.4  3.8       37     1\n 8 PIB Total 2023-02-28 1/2023       1.71   1.6  0.769  -0.4  3.8       85     0\n 9 PIB Total 2023-02-27 1/2023       1.72   1.68 0.834  -0.4  3.8       65     1\n10 PIB Total 2023-02-27 1/2023       1.71   1.6  0.769  -0.4  3.8       85     0\n# … with 874 more rows, and abbreviated variable names ¹​reference_date,\n#   ²​n_respondents\n```\n:::\n:::\n\n\n### get_annual()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Annual market expectations for SELIC and exchange rate (BRL) indicator\nmeedr::get_annual(\n  indicator      = c(\"Selic\", \"Câmbio\"),\n  reference_date = format(Sys.Date(), \"%Y\"),\n  be_quiet       = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,970 × 11\n   indicator detail date       referenc…¹  mean median    sd   min   max n_res…²\n   <chr>     <lgl>  <date>     <chr>      <dbl>  <dbl> <dbl> <dbl> <dbl>   <int>\n 1 Selic     NA     2023-03-03 2023       12.9   12.8  0.739 10.8   13.8     136\n 2 Selic     NA     2023-03-03 2023       12.9   12.8  0.710 11     13.8      44\n 3 Câmbio    NA     2023-03-03 2023        5.23   5.25 0.166  4.7    5.8     115\n 4 Câmbio    NA     2023-03-03 2023        5.20   5.2  0.171  4.8    5.6      38\n 5 Selic     NA     2023-03-02 2023       12.9   12.8  0.743 10.8   13.8     136\n 6 Selic     NA     2023-03-02 2023       12.9   12.8  0.668 11.2   13.8      45\n 7 Câmbio    NA     2023-03-02 2023        5.24   5.25 0.168  4.7    5.8     115\n 8 Câmbio    NA     2023-03-02 2023        5.24   5.26 0.170  4.85   5.6      40\n 9 Selic     NA     2023-03-01 2023       12.9   12.8  0.747 10.8   13.8     134\n10 Selic     NA     2023-03-01 2023       12.8   12.8  0.738 11     13.8      47\n# … with 1,960 more rows, 1 more variable: basis <int>, and abbreviated\n#   variable names ¹​reference_date, ²​n_respondents\n```\n:::\n:::\n\n\n### get_inflation_12m()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inflation over the next 12 months\n# First, and a suggestion, run this for using parallel computing:\nfuture::plan(future::multisession, workers = floor(future::availableCores()/2))\nmeedr::get_inflation_12m(\n  indicator   = c(\n    \"IGP-DI\", \"IGP-M\", \"INPC\", \"IPA-DI\", \"IPA-M\", \"IPCA\", \"IPCA-15\", \"IPC-Fipe\"\n    ),\n  smoothed    = \"yes\",\n  be_quiet    = FALSE, # display messages\n  do_parallel = TRUE # turn on parallel computing\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nRunning parallel with 2 cores (4 available)\n\nFetching [IGP-DI, IGP-M, INPC, IPA-DI, IPA-M, IPCA, IPCA-15, IPC-Fipe] data from BCB-Olinda... \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nFound 1985 observations!\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,985 × 10\n   indicator date       smoothed  mean median    sd   min   max n_respon…¹ basis\n   <chr>     <date>     <chr>    <dbl>  <dbl> <dbl> <dbl> <dbl>      <int> <int>\n 1 IGP-M     2023-03-03 yes       4.71   4.79 0.937  2.59  7.33         59     0\n 2 IGP-M     2023-03-03 yes       4.85   4.84 1.13   2.59  7.33         18     1\n 3 IPCA      2023-03-03 yes       5.56   5.60 0.452  3.80  6.62        117     0\n 4 IPCA      2023-03-03 yes       5.56   5.64 0.512  3.94  6.62         42     1\n 5 IGP-M     2023-03-02 yes       4.74   4.79 0.963  2.58  8.28         61     0\n 6 IGP-M     2023-03-02 yes       4.74   4.61 1.28   2.58  8.28         15     1\n 7 IPCA      2023-03-02 yes       5.56   5.58 0.452  3.81  6.61        116     0\n 8 IPCA      2023-03-02 yes       5.53   5.44 0.497  3.95  6.61         33     1\n 9 IGP-M     2023-03-01 yes       4.76   4.81 0.934  2.94  8.27         60     0\n10 IGP-M     2023-03-01 yes       4.92   4.85 1.23   3.35  8.27         13     1\n# … with 1,975 more rows, and abbreviated variable name ¹​n_respondents\n```\n:::\n:::\n\n\n### get_monthly_top5()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Monthly market expectations for IGP-M indicator (Top 5 Focus)\nmeedr::get_monthly_top5(\n  indicator  = \"IGP-M\",\n  first_date = NULL, # get all data to current date\n  calc_type  = \"long\",\n  be_quiet   = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 77,024 × 9\n   indicator date       reference_date calc_type  mean median     sd   min   max\n   <chr>     <date>     <chr>          <chr>     <dbl>  <dbl>  <dbl> <dbl> <dbl>\n 1 IGP-M     2022-02-18 02/2022        L         1.70    1.8  0.306   1.1   1.95\n 2 IGP-M     2022-02-18 03/2022        L         0.798   0.75 0.133   0.64  1   \n 3 IGP-M     2022-02-18 04/2022        L         0.592   0.45 0.244   0.35  1   \n 4 IGP-M     2022-02-18 05/2022        L         0.448   0.33 0.271   0.2   0.9 \n 5 IGP-M     2022-02-18 06/2022        L         0.574   0.5  0.133   0.41  0.76\n 6 IGP-M     2022-02-18 07/2022        L         0.46    0.43 0.0953  0.35  0.6 \n 7 IGP-M     2022-02-18 08/2022        L         0.476   0.5  0.0931  0.36  0.62\n 8 IGP-M     2022-02-18 09/2022        L         0.536   0.5  0.104   0.4   0.7 \n 9 IGP-M     2022-02-18 10/2022        L         0.534   0.5  0.065   0.45  0.62\n10 IGP-M     2022-02-18 11/2022        L         0.574   0.6  0.114   0.44  0.76\n# … with 77,014 more rows\n```\n:::\n:::\n\n\n### get_annual_top5()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Annual market expectations for SELIC indicator (Top 5 Focus)\nmeedr::get_annual_top5(\n  indicator   = \"Selic\",\n  be_quiet    = TRUE,\n  use_memoise = FALSE # disable caching system\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6,134 × 9\n   indicator date       reference_date calc_type  mean median    sd   min   max\n   <chr>     <date>     <chr>          <chr>     <dbl>  <dbl> <dbl> <dbl> <dbl>\n 1 Selic     2023-03-03 2023           S         12.8   12.8  0.857 10.8   13.8\n 2 Selic     2023-03-03 2024           S         10.2   10    1.10   8.25  13.8\n 3 Selic     2023-03-03 2025           S          8.81   9    0.968  6     11  \n 4 Selic     2023-03-03 2026           S          8.60   8.5  1.08   5     11  \n 5 Selic     2023-03-03 2027           S          8.54   8.5  1.15   5     11  \n 6 Selic     2023-03-03 2023           L         12.6   12.5  0.663 11.8   13.8\n 7 Selic     2023-03-03 2024           L          9.9   10    0.860  8.5   11  \n 8 Selic     2023-03-03 2025           L          9.55   9.5  0.678  8.5   10.5\n 9 Selic     2023-03-03 2026           L          9.4    9.5  0.8    8.5   10.5\n10 Selic     2023-03-03 2027           L          9.62   9.75 0.740  8.5   10.5\n# … with 6,124 more rows\n```\n:::\n:::\n\n\n## Data visualization\n\nNow we will create a cool chart about inflation expectations in Brazil. First, we will import the data from the Central Bank API using `{meedr}`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get market expectations for inflation over the next 12 months\ninflation <- meedr::get_inflation_12m(\n  indicator   = \"IPCA\",\n  first_date  = Sys.Date() - months(5 * 12),\n  smoothed    = \"yes\"\n  )\n```\n:::\n\n\nNext, we use `{ggplot2}` to generate a customized line chart. We plot the median of expectations and one standard deviation to observe some data distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot\ninflation |> \n  dplyr::filter(basis == 0) |> \n  ggplot2::ggplot() +\n  ggplot2::aes(x = date) +\n  ggplot2::geom_ribbon(\n    mapping = ggplot2::aes(ymin = median - sd, ymax = median + sd),\n    alpha   = 0.2, \n    fill    = \"#282f6b\"\n    ) +\n  ggplot2::geom_line(\n    mapping = ggplot2::aes(y = median - sd), \n    size    = 0.5, \n    color   = \"#282f6b\"\n      ) +\n  ggplot2::geom_line(\n    mapping = ggplot2::aes(y = median + sd), \n    size    = 0.5, \n    color   = \"#282f6b\"\n      ) +\n  ggplot2::geom_line(\n    mapping = ggplot2::aes(y = median, colour = \"IPCA\"),\n    size    = 1, \n    color   = \"#b22200\"\n    ) +\n  ggplot2::scale_x_date(date_breaks = \"9 months\", date_labels = \"%m/%Y\") +\n  ggplot2::labs(\n    title    = \"Brazil: Market expectations for inflation over the next 12 months\",\n    subtitle = \"Smoothed median and standard deviation, IPCA\",\n    x        = NULL,\n    y        = \"%\",\n    caption  = \"**Data**: BCB | **Chart**: Fernando da Silva\"\n    ) +\n  ggplot2::theme_light(base_size = 16) +\n  ggplot2::theme(\n    plot.title   = ggplot2::element_text(face = \"bold\"),\n    plot.caption = ggtext::element_textbox_simple(\n      margin = ggplot2::margin(10, 0, 0, 0)\n      ),\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    axis.text             = ggplot2::element_text(face = \"bold\"),\n    axis.title            = ggplot2::element_text(face = \"bold\"),\n    legend.text           = ggplot2::element_text(face = \"bold\")\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=2550}\n:::\n:::\n\n\nAnd that's it!\n\nThe process of developing a package is a lot of learning and enrichment. Soon I intend to increase the package with new utilities. In the meantime, feel free to use and test the package, I will be happy to receive any feedback!\n\n## GitHub repo and documentation\n\nCheck the source code and other information in the package repository on [GitHub](https://github.com/schoulten/meedr).\n\nCheck the package documentation on [this page](https://fortietwo.com/meedr/).\n\n<details><summary>Informações da sessão</summary>\n\n<div style=\"font-size:14px;\">\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  Portuguese_Brazil.utf8\n ctype    Portuguese_Brazil.utf8\n tz       America/Sao_Paulo\n date     2023-03-10\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.2.335 @ C:\\\\PROGRA~1\\\\Quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.2.1)\n cachem        1.0.6      2021-08-19 [1] CRAN (R 4.2.1)\n cli           3.4.1      2022-09-23 [1] CRAN (R 4.2.1)\n codetools     0.2-18     2020-11-04 [2] CRAN (R 4.2.1)\n colorspace    2.0-3      2022-02-21 [1] CRAN (R 4.2.1)\n curl          4.3.3      2022-10-06 [1] CRAN (R 4.2.1)\n DBI           1.1.3      2022-06-18 [1] CRAN (R 4.2.1)\n digest        0.6.29     2021-12-01 [1] CRAN (R 4.2.1)\n dplyr         1.0.10     2022-09-01 [1] CRAN (R 4.2.1)\n evaluate      0.17       2022-10-07 [1] CRAN (R 4.2.1)\n fansi         1.0.3      2022-03-24 [1] CRAN (R 4.2.1)\n farver        2.1.1      2022-07-06 [1] CRAN (R 4.2.1)\n fastmap       1.1.0      2021-01-25 [1] CRAN (R 4.2.1)\n furrr         0.3.1      2022-08-15 [1] CRAN (R 4.2.1)\n future        1.28.0     2022-09-02 [1] CRAN (R 4.2.1)\n generics      0.1.3      2022-07-05 [1] CRAN (R 4.2.1)\n ggplot2       3.3.6      2022-05-03 [1] CRAN (R 4.2.1)\n ggtext        0.1.2      2022-09-16 [1] CRAN (R 4.2.1)\n globals       0.16.1     2022-08-28 [1] CRAN (R 4.2.1)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.2.1)\n gridtext      0.1.4.9000 2022-06-07 [1] Github (wilkelab/gridtext@6192174)\n gtable        0.3.1      2022-09-01 [1] CRAN (R 4.2.1)\n htmltools     0.5.3      2022-07-18 [1] CRAN (R 4.2.1)\n htmlwidgets   1.5.4      2021-09-08 [1] CRAN (R 4.2.1)\n httr          1.4.5      2023-02-24 [1] CRAN (R 4.2.2)\n jsonlite      1.8.4      2022-12-06 [1] CRAN (R 4.2.2)\n knitr         1.40       2022-08-24 [1] CRAN (R 4.2.1)\n labeling      0.4.2      2020-10-20 [1] CRAN (R 4.2.0)\n lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.2.1)\n listenv       0.8.0      2019-12-05 [1] CRAN (R 4.2.1)\n lubridate     1.9.2      2023-02-10 [1] CRAN (R 4.2.2)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.2.1)\n markdown      1.1        2019-08-07 [1] CRAN (R 4.2.1)\n meedr       * 0.0.3      2022-08-12 [1] Github (schoulten/meedr@66f13cd)\n memoise       2.0.1      2021-11-26 [1] CRAN (R 4.2.1)\n munsell       0.5.0      2018-06-12 [1] CRAN (R 4.2.1)\n parallelly    1.32.1     2022-07-21 [1] CRAN (R 4.2.1)\n pillar        1.8.1      2022-08-19 [1] CRAN (R 4.2.1)\n pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.2.1)\n purrr         0.3.5      2022-10-06 [1] CRAN (R 4.2.1)\n R6            2.5.1      2021-08-19 [1] CRAN (R 4.2.1)\n Rcpp          1.0.9      2022-07-08 [1] CRAN (R 4.2.1)\n rlang         1.0.6      2022-09-24 [1] CRAN (R 4.2.1)\n rmarkdown     2.17       2022-10-07 [1] CRAN (R 4.2.1)\n rstudioapi    0.14       2022-08-22 [1] CRAN (R 4.2.1)\n scales        1.2.1      2022-08-20 [1] CRAN (R 4.2.1)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.2.1)\n stringi       1.7.8      2022-07-11 [1] CRAN (R 4.2.1)\n stringr       1.5.0      2022-12-02 [1] CRAN (R 4.2.2)\n tibble        3.1.8      2022-07-22 [1] CRAN (R 4.2.1)\n tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.2.1)\n timechange    0.2.0      2023-01-11 [1] CRAN (R 4.2.2)\n utf8          1.2.2      2021-07-24 [1] CRAN (R 4.2.1)\n vctrs         0.5.1      2022-11-16 [1] CRAN (R 4.2.1)\n withr         2.5.0      2022-03-03 [1] CRAN (R 4.2.1)\n xfun          0.33       2022-09-12 [1] CRAN (R 4.2.1)\n xml2          1.3.3      2021-11-30 [1] CRAN (R 4.2.1)\n yaml          2.3.5      2022-02-21 [1] CRAN (R 4.2.1)\n\n [1] C:/Users/ferna/AppData/Local/R/win-library/4.2\n [2] C:/Program Files/R/R-4.2.1/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n</div>\n\n</details>\n\n<div style=\"border-top: 1px solid #dee2e6; padding-top: 1rem;\">\n<!-- AddToAny BEGIN -->\n<strong>Compartilhar:</strong>\n<div class=\"a2a_kit a2a_kit_size_32 a2a_default_style\">\n<a class=\"a2a_button_email\"></a>\n<a class=\"a2a_button_facebook\"></a>\n<a class=\"a2a_button_mastodon\"></a>\n<a class=\"a2a_button_linkedin\"></a>\n<a class=\"a2a_button_twitter\"></a>\n<a class=\"a2a_button_whatsapp\"></a>\n</div>\n<script async src=\"https://static.addtoany.com/menu/page.js\"></script>\n<!-- AddToAny END -->\n</div>\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}