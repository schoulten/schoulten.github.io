{
  "hash": "576ad7700808bd2aa1f1935da4536269",
  "result": {
    "markdown": "---\ntitle: \"O andar do bêbado e seu cachorro: entendendo cointegração no R\"\ndate: \"2022-04-30\"\ndate-modified: \"2023-03-10\"\nauthor: \"Fernando da Silva\"\ndescription: \"Uma analogia sobre cointegração de Engle-Granger e uma aplicação em R\"\ncategories: [Time Series, Cointegration, R, Português]\nimage: \"imgs/random_walk.png\"\naliases: \n  - /posts/series-temporais/cointegration/index.html\n---\n\n\nMuito utilizado no mercado financeiro para estratégias *long-short*, arbitragem estatística, *pairs trading* e em análise e previsão de séries temporais macroeconômicas, o conceito de cointegração é ao mesmo tempo fascinante e intimidador de se compreender. Por isso, neste breve texto iremos explicar o que é cointegração com um exemplo intuitivo e fazer um exercício simples aplicando o teste de cointegração de Engle-Granger com pares de ações brasileiras usando o R!\n\n\n## A analogia do bêbado e seu cachorro\n\nAs definições matemáticas de cointegração, e tópicos relacionados, são um tanto quanto sofisticadas, mas o seu conceito é simples o suficiente para ser introduzido com a cômica analogia do andar do bêbado e seu cachorro. Os créditos da analogia são inteiramente de Michael P. Murray que escreveu, em 1994, um *paper* didático de apenas 3 páginas elucidando o conceito de cointegração com o conto do andar do bêbado.\n\nImagine que você esteja andando na rua da sua cidade e aviste um bêbado que acaba de sair do bar, vagando em direção a sua casa. Você percebe que o bêbado caminha de maneira peculiar e imprevisível, algumas vezes se desviando para a esquerda e outras para a direita enquanto tenta, com dificuldades, seguir o seu caminho. Ao observar a trajetória do bêbado pode-se dizer que seus passos são nada mais do que uma sequência aleatória de passos. Na econometria, chamamos a trajetória do bêbado de **passeio aleatório** (*random walk*), de maneira a descrever o comportamento de muitas das séries econômicas que existem.\n\nPor andar de forma aleatória, se você desviar o olhar e parar de observar o bêbado andando, será difícil dizer onde o bêbado estará após um determinado tempo, pois sua trajetória é imprevisível. Uma das características das trajetórias do tipo passeio aleatório, como a do bêbado, é de que a melhor previsão sobre um valor futuro é o último valor observado. Dessa forma, o seu palpite sobre a localização atual do bêbado poderia ser algo como o último lugar onde você o avistou, ou seja, na saída do bar.\n\nAgora imagine que o bêbado tenha um cachorro amigo, sem coleira, que o acompanha. De forma similar ao bêbado, o cachorro também segue uma sequência aleatória de passos, sendo atraído por cada cheiro novo e estímulos que sente no caminho. Sempre que o bêbado percebe que o cachorro foi muito longe ele o chama: \"Thor!\". E o cachorro obedece o chamado retornando para perto de seu dono, caracterizando assim uma correção da distância entre ambos.\n\nSe fossemos representar por meio de um gráfico a trajetória do bêbado e do cachorro ao longo do tempo e em relação a um ponto de referência qualquer (como o bar), seria algo como:\n\n![](imgs/random_walk.png)\n\nObservando as trajetórias de ambos, pode-se dizer que mesmo que a localização atual do bêbado após um tempo seja imprevisível, a localização do cachorro é relativamente previsível, pois ele não se afastará muito do seu dono. Dessa forma, agora um bom palpite sobre a localização do bêbado, por exemplo, pode ser dado uma vez que você tenha encontrado o cachorro, e vice-versa, pois conforme seguem dando passos aleatórios também corrigem a distância entre ambos. Na econometria, chamamos isso formalmente de **mecanismo de correção de erros**.\n\nNote, também, que ambas as trajetórias são o que chamamos de séries temporais não-estacionárias, dado que quanto mais tempo passa é mais provável que o bêbado e seu cachorro estejam vagando bem longe de onde foram vistos por último. Se for verdade que a distância entre eles seja corrigida por um mecanismo de correção de erros, então a distância entre as trajetórias é dita *cointegrada de ordem zero*.\n\nPara entender o que a expressão *cointegrada de ordem zero* significa, vale primeiro entender o que são *séries integradas*. Séries temporais não-estacionárias que se tornam estacionárias quando diferenciadas *n* vezes são ditas *integradas de ordem n* ou, simplesmente, $\\text{I}(n)$. Para duas séries temporais serem cointegradas, cada série precisa ser integrada de mesma ordem, *n*; por isso o termo *cointegração*. Sendo assim, um conjunto de séries temporais, todas integradas de ordem *n*, são ditas cointegradas se e somente se alguma combinação linear das séries é integrada de ordem menor do que *n*. Tal combinação linear foi chamada de **relação de cointegração**, conforme o trabalho de Engle e Granger (1987).\n\n## Cointegração no sentido de Engle-Granger\n\nDe maneira um pouco mais formal, partindo de um modelo de passeio aleatório para as trajetórias do bêbado ($x_t$) e do cachorro ($y_t$), temos:\n\n$$u_t = x_t - x_{t-1}$$\n$$w_t = y_t - y_{t-1}$$\n\nonde $u_t$ e $w_t$ representam, respectivamente, o passeio aleatório do bêbado e do cachorro ao longo do tempo $t$ e são ruído branco estacionários. Podemos então modelar a \"trajetória cointegrada\" do bêbado e do cachorro como:\n\n$$u_t + c(y_{t-1} - x_{t-1}) = x_t - x_{t-1}$$\n$$w_t + d(x_{t-1} - y_{t-1}) = y_t - y_{t-1}$$\n\nonde $u_t$ e $w_t$ são novamente os passeios aleatórios do bêbado e do cachorro e os termos adicionais no lado esquerdo das equações são os *termos de correção de erro* pelo quais o bêbado e o cachorro corrigem a distância um do outro, ou seja, permanecem próximos. Podemos então dizer que, das equações acima, $(y_{t-1} - x_{t-1})$ é uma relação de cointegração entre a trajetória do bêbado e do cachorro. Dessa forma, se estabelece uma relação de equilíbrio de longo prazo entre as trajetórias.\n\nNote que se os termos de correção de erros forem não-estacionários, então as trajetórias modeladas para o bêbado e o cachorro também seriam não-estacionárias, portanto ambos iriam provavelmente se distanciar bastante ao longo do tempo. Nesse caso, diríamos que as séries temporais das trajetórias do bêbado e do cachorro não são cointegradas de ordem zero. No entanto, Engle e Granger (1987) provaram que se a trajetória do bêbado e do cachorro são ambas integradas de ordem 1 e seguem o descrito nas equações acima, então as trajetórias cointegram.\n\nA analogia do bêbado e seu cachorro é uma boa forma de entender os conceitos básicos de cointegração e do mecanismo de correção de erro, no entanto, há inúmeros detalhes técnicos que devem ser considerados em aplicações com dados reais. Para se aprofundar mais no tema considere um curso de econometria de séries temporais.\n\nO conceito de cointegração é bastante utilizado em exercícios de macroeconomia, mas também pode ser usado no mercado financeiro com o objetivo de identificar relações — como a do bêbado e seu cachorro — entre ativos e realizar operações lucrativas com a técnica. Um exemplo disso são as estratégias de *pairs trading*, onde se realiza operações com pares de ativos que apresentem relação de cointegração de modo a obter lucro com a arbitragem. O grande desafio dessa aplicação é encontrar o par de ativo que apresente essas características.\n\n## Teste de Cointegração de Engle-Granger\n\nDe maneira prática, para verificar se um conjunto de séries temporais $y_t$ e $x_t$ cointegram, é preciso seguir os procedimentos propostos por Engle e Granger (1987):\n\n1. Verificar se as séries são estacionárias;\n2. Estimar a regressão cointegrante das séries: $y_t = \\alpha + \\beta x_t + \\epsilon_t$;\n3. Verificar se o resíduo da regressão cointegrante é estacionário usando os valores críticos de Engle e Granger (1987);\n4. Se o resíduo for estacionário, a regressão cointegrante não é espúria e pode-se estimar um modelo de correção de erros para obter a relação de equilíbrio das séries.\n\nA seguir mostraremos como aplicar o teste com um par de ações negociadas na B3 e para isso usaremos a linguagem R.\n\n## Exemplo no R\n\nO exemplo utilizará o par de ações PETR3 e PETR4 no período de 28 de março de 2021 até 28 de março de 2022. Os dados são públicos e podem ser acessados pelo Yahoo Finance, havendo opção de usar pacotes ou web scraping para extrair os dados. O código abaixo faz a extração e tratamento de dados:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Carregar pacotes\nlibrary(httr2)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggtext)\nlibrary(aTSA)\n\n\n# Função para importar arquivo CSV do Yahoo Finance como um tibble\nread_yfinance <- function(url) {\n  pagina <- httr2::request(base_url = url)\n  conteudo <- pagina |> httr2::req_perform() |> httr2::resp_body_string()\n  tabela <- readr::read_csv(file = conteudo)\n  return(tabela)\n}\n\n\n# Coleta de dados online: ações da PETR3 e PETR4\ndados_petr3 <- read_yfinance(\n  paste0(\n    \"https://query1.finance.yahoo.com/v7/finance/download/PETR3.SA?period1=\",\n    \"1619568000&period2=1651104000&interval=1d&events=history&includeAdjust\",\n    \"edClose=true\"\n    )\n  )\ndados_petr4 <- read_yfinance(\n  paste0(\n    \"https://query1.finance.yahoo.com/v7/finance/download/PETR4.SA?period1=\",\n    \"1619568000&period2=1651104000&interval=1d&events=history&includeAdjust\",\n    \"edClose=true\"\n    )\n  )\n\n# Cruzamento e tratamento dde dados\ndados <- dplyr::left_join(\n  x  = dplyr::select(dados_petr3, \"date\" = \"Date\", \"PETR3\" = \"Adj Close\"),\n  y  = dplyr::select(dados_petr4, \"date\" = \"Date\", \"PETR4\" = \"Adj Close\"),\n  by = \"date\"\n  )\n```\n:::\n\n\nAntes de partir para o teste vale visualizar as séries temporais:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plotar séries\ndados_long <- dados |> \n  tidyr::pivot_longer(cols = -\"date\")\n\nggplot2::ggplot(data = dados_long) +\n  ggplot2::aes(x = date, y = value, color = name) +\n  ggplot2::geom_line(size = 1) +\n  ggplot2::scale_x_date(date_breaks = \"2 months\", date_labels = \"%b/%Y\") +\n  ggplot2::scale_y_continuous(n.breaks = 6) +\n  ggplot2::scale_color_manual(values = c(\"#282f6b\", \"#b22200\")) +\n  ggplot2::labs(\n    title   = \"Preço de fechamento diário ajustado\",\n    x       = NULL,\n    y       = NULL,\n    color   = NULL,\n    caption = \"**Dados**: Yahoo Finance | **Elaboração**: Fernando da Silva\"\n    ) + \n  ggplot2::theme_light(base_size = 16) +\n  ggplot2::theme(\n    plot.title   = ggplot2::element_text(face = \"bold\"),\n    plot.caption = ggtext::element_textbox_simple(\n      margin = ggplot2::margin(10, 0, 0, 0)\n      ),\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.text           = ggplot2::element_text(face = \"bold\"),\n    legend.position       = c(0.1, 0.85),\n    legend.key            = ggplot2::element_blank(),\n    legend.background     = ggplot2::element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=2400}\n:::\n:::\n\n\nAs séries parecem apresentar uma trajetória de passeio aleatório, como a do bêbado e seu cachorro, algo comum em séries de ativos financeiros.\n\nAgora vamos para a primeira etada do teste de cointegração de Engle-Granger, ou seja, verificar se as séries são estacionárias. Podemos fazer isso com o teste ADF através da função `adf.test()`:\n\n::: {.grid}\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\naTSA::adf.test(dados$PETR3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAugmented Dickey-Fuller Test \nalternative: stationary \n \nType 1: no drift no trend \n     lag  ADF p.value\n[1,]   0 1.41   0.959\n[2,]   1 1.52   0.967\n[3,]   2 1.64   0.975\n[4,]   3 1.61   0.974\n[5,]   4 1.84   0.983\nType 2: with drift no trend \n     lag    ADF p.value\n[1,]   0 -0.982   0.703\n[2,]   1 -1.014   0.692\n[3,]   2 -0.969   0.707\n[4,]   3 -1.007   0.694\n[5,]   4 -0.997   0.698\nType 3: with drift and trend \n     lag   ADF p.value\n[1,]   0 -2.42   0.401\n[2,]   1 -2.30   0.447\n[3,]   2 -2.15   0.512\n[4,]   3 -2.18   0.501\n[5,]   4 -2.00   0.576\n---- \nNote: in fact, p.value = 0.01 means p.value <= 0.01 \n```\n:::\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\naTSA::adf.test(dados$PETR4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAugmented Dickey-Fuller Test \nalternative: stationary \n \nType 1: no drift no trend \n     lag  ADF p.value\n[1,]   0 1.18   0.937\n[2,]   1 1.24   0.945\n[3,]   2 1.29   0.951\n[4,]   3 1.36   0.956\n[5,]   4 1.56   0.970\nType 2: with drift no trend \n     lag   ADF p.value\n[1,]   0 -1.17   0.637\n[2,]   1 -1.20   0.627\n[3,]   2 -1.17   0.636\n[4,]   3 -1.18   0.635\n[5,]   4 -1.18   0.634\nType 3: with drift and trend \n     lag   ADF p.value\n[1,]   0 -2.68   0.290\n[2,]   1 -2.62   0.315\n[3,]   2 -2.54   0.349\n[4,]   3 -2.46   0.383\n[5,]   4 -2.28   0.456\n---- \nNote: in fact, p.value = 0.01 means p.value <= 0.01 \n```\n:::\n:::\n\n:::\n\n:::\n\nConforme os resultados, falhamos em rejeitar a hipótese nula do teste de a série ter raiz unitária, ou seja, as séries são não-estacionárias nos testes considerados (sem constante com tendência, com constante sem tendência e com constante e tendência).\n\nIdentificado que as séries são integradas de mesma ordem (nesse caso I(1), conforme pode ser confirmado usando a função `forecast::ndiffs`), podemos prosseguir com as etapas 2 e 3 que envolvem estimar a regressão cointegrante e verificar a estacionariedade do resíduo desta regressão. No R, isso tudo pode ser feito com a função `coint.test()`, que já toma o cuidado de usar os valores críticos corretos para testar os resíduos, conforme MacKinnon (1991).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Teste de Cointegração de Engle-Granger\naTSA::coint.test(dados$PETR3, dados$PETR4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nResponse: dados$PETR3 \nInput: dados$PETR4 \nNumber of inputs: 1 \nModel: y ~ X + 1 \n------------------------------- \nEngle-Granger Cointegration Test \nalternative: cointegrated \n\nType 1: no trend \n    lag      EG p.value \n   4.00   -4.25    0.01 \n----- \n Type 2: linear trend \n    lag      EG p.value \n  4.000   0.437   0.100 \n----- \n Type 3: quadratic trend \n    lag      EG p.value \n  4.000   0.364   0.100 \n----------- \nNote: p.value = 0.01 means p.value <= 0.01 \n    : p.value = 0.10 means p.value >= 0.10 \n```\n:::\n:::\n\n\nNote que a função aplica 3 especificações: sem tendência, com tendência e com tendência quadrática. Em outros pacotes estatísticos e econométricos, como no Gretl, considera-se geralmente somente a primeira. Conforme os resultados, pelo p-valor da primeira especificação, sem tendência, temos que o resíduo da regressão cointegrante é estacionário, mas isso não se verifica para outras especificações. Em outras palavras, há evidências de que **as séries PETR3 e PETR4 cointegram**, para a amostra de dados selecionada e com base no teste sobre o resíduo sem tendência (se o resíduo apresentar tendência, outro tipo do teste deve ser considerado).\n\n\n## Referências\n\nAbordamos brevemente o conceito de cointegração de séries temporais no sentido de Engle-Granger. Há vários buracos deixados ao longo do texto que precisam de mais espaço e conhecimentos prévios para serem preenchidos. Espero poder abordar outros desses tópicos sobre séries temporais adiante, mas por enquanto aproveite para conferir abaixo os trabalhos citados.\n\nEngle, R. F., & Granger, C. W. (1987). *Co-integration and error correction: representation, estimation, and testing*. Econometrica: journal of the Econometric Society, 251-276.\n\nMacKinnon, J. G. (1991). *Critical values for cointegration tests*, Ch. 13 in Long-run Economic Relationships: Readings in Cointegration, eds. R. F. Engle and C. W. J. Granger, Oxford, Oxford University Press.\n\nMurray, M. P. (1994). *A drunk and her dog: an illustration of cointegration and error correction*. The American Statistician, 48(1), 37-39.\n\n<details><summary>Informações da sessão</summary>\n\n<div style=\"font-size:14px;\">\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  Portuguese_Brazil.utf8\n ctype    Portuguese_Brazil.utf8\n tz       America/Sao_Paulo\n date     2023-03-10\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.2.335 @ C:\\\\PROGRA~1\\\\Quarto\\\\bin\\\\quarto.exe\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version    date (UTC) lib source\n D archive       1.1.5      2022-05-06 [1] CRAN (R 4.2.2)\n   assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.2.1)\n   aTSA        * 3.1.2      2015-07-08 [1] CRAN (R 4.2.0)\n   bit           4.0.4      2020-08-04 [1] CRAN (R 4.2.1)\n   bit64         4.0.5      2020-08-30 [1] CRAN (R 4.2.1)\n   cli           3.4.1      2022-09-23 [1] CRAN (R 4.2.1)\n   colorspace    2.0-3      2022-02-21 [1] CRAN (R 4.2.1)\n   crayon        1.5.2      2022-09-29 [1] CRAN (R 4.2.1)\n   curl          4.3.3      2022-10-06 [1] CRAN (R 4.2.1)\n   DBI           1.1.3      2022-06-18 [1] CRAN (R 4.2.1)\n   digest        0.6.29     2021-12-01 [1] CRAN (R 4.2.1)\n   dplyr       * 1.0.10     2022-09-01 [1] CRAN (R 4.2.1)\n   ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.2.1)\n   evaluate      0.17       2022-10-07 [1] CRAN (R 4.2.1)\n   fansi         1.0.3      2022-03-24 [1] CRAN (R 4.2.1)\n   farver        2.1.1      2022-07-06 [1] CRAN (R 4.2.1)\n   fastmap       1.1.0      2021-01-25 [1] CRAN (R 4.2.1)\n   generics      0.1.3      2022-07-05 [1] CRAN (R 4.2.1)\n   ggplot2     * 3.3.6      2022-05-03 [1] CRAN (R 4.2.1)\n   ggtext      * 0.1.2      2022-09-16 [1] CRAN (R 4.2.1)\n   glue          1.6.2      2022-02-24 [1] CRAN (R 4.2.1)\n   gridtext      0.1.4.9000 2022-06-07 [1] Github (wilkelab/gridtext@6192174)\n   gtable        0.3.1      2022-09-01 [1] CRAN (R 4.2.1)\n   hms           1.1.2      2022-08-19 [1] CRAN (R 4.2.1)\n   htmltools     0.5.3      2022-07-18 [1] CRAN (R 4.2.1)\n   htmlwidgets   1.5.4      2021-09-08 [1] CRAN (R 4.2.1)\n   httr2       * 0.2.2      2022-09-25 [1] CRAN (R 4.2.1)\n   jsonlite      1.8.4      2022-12-06 [1] CRAN (R 4.2.2)\n   knitr         1.40       2022-08-24 [1] CRAN (R 4.2.1)\n   labeling      0.4.2      2020-10-20 [1] CRAN (R 4.2.0)\n   lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.2.1)\n   magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.2.1)\n   markdown      1.1        2019-08-07 [1] CRAN (R 4.2.1)\n   munsell       0.5.0      2018-06-12 [1] CRAN (R 4.2.1)\n   pillar        1.8.1      2022-08-19 [1] CRAN (R 4.2.1)\n   pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.2.1)\n   purrr         0.3.5      2022-10-06 [1] CRAN (R 4.2.1)\n   R6            2.5.1      2021-08-19 [1] CRAN (R 4.2.1)\n   rappdirs      0.3.3      2021-01-31 [1] CRAN (R 4.2.1)\n   Rcpp          1.0.9      2022-07-08 [1] CRAN (R 4.2.1)\n   readr       * 2.1.3      2022-10-01 [1] CRAN (R 4.2.1)\n   rlang         1.0.6      2022-09-24 [1] CRAN (R 4.2.1)\n   rmarkdown     2.17       2022-10-07 [1] CRAN (R 4.2.1)\n   rstudioapi    0.14       2022-08-22 [1] CRAN (R 4.2.1)\n   scales        1.2.1      2022-08-20 [1] CRAN (R 4.2.1)\n   sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.2.1)\n   stringi       1.7.8      2022-07-11 [1] CRAN (R 4.2.1)\n   stringr       1.5.0      2022-12-02 [1] CRAN (R 4.2.2)\n   tibble        3.1.8      2022-07-22 [1] CRAN (R 4.2.1)\n   tidyr       * 1.2.1      2022-09-08 [1] CRAN (R 4.2.1)\n   tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.2.1)\n   tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.2.1)\n   utf8          1.2.2      2021-07-24 [1] CRAN (R 4.2.1)\n   vctrs         0.5.1      2022-11-16 [1] CRAN (R 4.2.1)\n   vroom         1.6.0      2022-09-30 [1] CRAN (R 4.2.1)\n   withr         2.5.0      2022-03-03 [1] CRAN (R 4.2.1)\n   xfun          0.33       2022-09-12 [1] CRAN (R 4.2.1)\n   xml2          1.3.3      2021-11-30 [1] CRAN (R 4.2.1)\n   yaml          2.3.5      2022-02-21 [1] CRAN (R 4.2.1)\n\n [1] C:/Users/ferna/AppData/Local/R/win-library/4.2\n [2] C:/Program Files/R/R-4.2.1/library\n\n D ── DLL MD5 mismatch, broken installation.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n</div>\n\n</details>\n\n<div style=\"border-top: 1px solid #dee2e6; padding-top: 1rem;\">\n<!-- AddToAny BEGIN -->\n<strong>Compartilhar:</strong>\n<div class=\"a2a_kit a2a_kit_size_32 a2a_default_style\">\n<a class=\"a2a_button_email\"></a>\n<a class=\"a2a_button_facebook\"></a>\n<a class=\"a2a_button_mastodon\"></a>\n<a class=\"a2a_button_linkedin\"></a>\n<a class=\"a2a_button_twitter\"></a>\n<a class=\"a2a_button_whatsapp\"></a>\n</div>\n<script async src=\"https://static.addtoany.com/menu/page.js\"></script>\n<!-- AddToAny END -->\n</div>\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}